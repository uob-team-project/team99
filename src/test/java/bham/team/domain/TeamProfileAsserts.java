package bham.team.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TeamProfileAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamProfileAllPropertiesEquals(TeamProfile expected, TeamProfile actual) {
        assertTeamProfileAutoGeneratedPropertiesEquals(expected, actual);
        assertTeamProfileAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamProfileAllUpdatablePropertiesEquals(TeamProfile expected, TeamProfile actual) {
        assertTeamProfileUpdatableFieldsEquals(expected, actual);
        assertTeamProfileUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamProfileAutoGeneratedPropertiesEquals(TeamProfile expected, TeamProfile actual) {
        assertThat(expected)
            .as("Verify TeamProfile auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamProfileUpdatableFieldsEquals(TeamProfile expected, TeamProfile actual) {
        assertThat(expected)
            .as("Verify TeamProfile relevant properties")
            .satisfies(e -> assertThat(e.getTeamID()).as("check teamID").isEqualTo(actual.getTeamID()))
            .satisfies(e -> assertThat(e.getAppLink()).as("check appLink").isEqualTo(actual.getAppLink()))
            .satisfies(e -> assertThat(e.getAppDescription()).as("check appDescription").isEqualTo(actual.getAppDescription()))
            .satisfies(e -> assertThat(e.getLogoPic()).as("check logoPic").isEqualTo(actual.getLogoPic()))
            .satisfies(e ->
                assertThat(e.getLogoPicContentType()).as("check logoPic contenty type").isEqualTo(actual.getLogoPicContentType())
            )
            .satisfies(e -> assertThat(e.getNickName()).as("check nickName").isEqualTo(actual.getNickName()))
            .satisfies(e -> assertThat(e.getSlogan()).as("check slogan").isEqualTo(actual.getSlogan()))
            .satisfies(e -> assertThat(e.getVotes()).as("check votes").isEqualTo(actual.getVotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamProfileUpdatableRelationshipsEquals(TeamProfile expected, TeamProfile actual) {
        assertThat(expected)
            .as("Verify TeamProfile relationships")
            .satisfies(e -> assertThat(e.getImageGalleries()).as("check imageGalleries").isEqualTo(actual.getImageGalleries()))
            .satisfies(e -> assertThat(e.getMembers()).as("check members").isEqualTo(actual.getMembers()));
    }
}
